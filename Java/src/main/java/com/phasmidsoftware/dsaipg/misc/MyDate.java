/*
 * Copyright (c) 2018. Phasmid Software
 */

package com.phasmidsoftware.dsaipg.misc;

import java.util.Objects;

/**
 * Represents a date with a year, month, and day.
 * This class is immutable and implements Comparable for comparing dates.
 */
public class MyDate implements Comparable<MyDate> {

    /**
     * This was auto-generated by IntelliJ IDEA
     *
     * @param o the other object
     * @return true if this and o have same primary key (compatible with hashCode).
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        MyDate myDate = (MyDate) o;
        return year == myDate.year &&
                month == myDate.month &&
                day == myDate.day;
    }

    /**
     * This was auto-generated by IntelliJ IDEA
     *
     * @return a hashCode based on the primary key (compatible with equals).
     */
    @Override
    public int hashCode() {
        return Objects.hash(year, month, day);
    }

    /**
     * Determines the day of the week for this date.
     * The days of the week are represented as integers, where Monday is 1 and Sunday is 7.
     * If the value has not been previously computed, it calculates the day of the week
     * using the Java Time API and caches it for future retrieval.
     *
     * @return an integer representing the day of the week for this date, where Monday is 1 and Sunday is 7.
     */
    public int getDayOfWeek() {
        if (dayOfWeek == -1)
            dayOfWeek = java.time.LocalDate.of(year, month, day).getDayOfWeek().getValue();
        return dayOfWeek;
    }

    /**
     * Compares two MyDate objects for order.
     * The comparison is performed first by year, then by month, and finally by day.
     *
     * @param that the other MyDate object to compare against
     * @return a negative integer, zero, or a positive integer as this MyDate is less than,
     * equal to, or greater than the specified MyDate
     */
    public int compareTo(MyDate that) {
        int cfy = Integer.compare(this.year, that.year);
        if (cfy != 0) return cfy;
        int cfm = Integer.compare(this.month, that.month);
        if (cfm != 0) return cfm;
        return Integer.compare(this.day, that.day);
    }

    /**
     * Retrieves the year component of this date.
     *
     * @return the year as an integer.
     */
    public int getYear() {
        return year;
    }

    /**
     * Retrieves the month component of the date.
     *
     * @return the month of the date as an integer, where January is represented as 1, February as 2, and so on.
     */
    public int getMonth() {
        return month;
    }

    /**
     * Retrieves the day of the month represented by this date.
     *
     * @return the day of the month as an integer.
     */
    public int getDay() {
        return day;
    }

    /**
     * Constructs a MyDate instance with the specified year, month, and day.
     *
     * @param year  the year of the date
     * @param month the month of the date, where 1 represents January and 12 represents December
     * @param day   the day of the date, starting from 1
     */
    public MyDate(int year, int month, int day) {
        this.year = year;
        this.month = month;
        this.day = day;
    }

    /**
     * The year component of a date.
     * Represents a specific year in the Gregorian calendar.
     * This field is immutable and should not change once initialized.
     */
    private final int year;
    /**
     * Represents the month component of a date.
     * The value ranges from 1 to 12, where:
     * 1 represents January,
     * 2 represents February, and so on up to 12, which represents December.
     * This field is immutable and is set during the construction of the MyDate object.
     */
    private final int month;
    /**
     * Represents the day of the month for a specific date.
     * This field is a component of the MyDate class and is immutable once set.
     */
    private final int day;
    /**
     * Represents the day of the week for the date encapsulated by this class.
     * The value is stored as an integer with the following mapping:
     * 1 for Monday, 2 for Tuesday, ..., 7 for Sunday.
     *
     * This field is marked as transient because it can be derived dynamically
     * and does not need to be serialized. Its default value of -1 indicates
     * that the day of the week has not yet been computed or initialized.
     */
    private transient int dayOfWeek = -1;
}